from telegram import Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler
)
from for_lemana_count import count_diam
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
DIAMETER, VITKI, WIDTH = range(3)

class MaterialCalculatorBot:
    def __init__(self, token):
        self.updater = Updater(token, use_context=True)
        self.dp = self.updater.dispatcher
        self.user_data = {}
        
        self._setup_handlers()
    
    def _setup_handlers(self):
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                DIAMETER: [MessageHandler(Filters.text & ~Filters.command, self.get_diameter)],
                VITKI: [MessageHandler(Filters.text & ~Filters.command, self.get_vitki)],
                WIDTH: [MessageHandler(Filters.text & ~Filters.command, self.get_width)]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            allow_reentry=True
        )
        
        self.dp.add_handler(conv_handler)
        self.dp.add_error_handler(self.error_handler)
    
    def start(self, update: Update, context: CallbackContext):
        user_id = update.message.from_user.id
        self.user_data[user_id] = {}
        update.message.reply_text(
            "üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä —Ä—É–ª–æ–Ω–∞ (–≤ –º–µ—Ç—Ä–∞—Ö):"
        )
        return DIAMETER
    
    def get_diameter(self, update: Update, context: CallbackContext):
        try:
            diameter = float(update.message.text)
            if diameter <= 0:
                update.message.reply_text("‚ùå –î–∏–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
                return DIAMETER
            
            self.user_data[update.message.from_user.id]['diameter'] = diameter
            update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ç–∫–æ–≤:")
            return VITKI
        except ValueError:
            update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5)")
            return DIAMETER
    
    def get_vitki(self, update: Update, context: CallbackContext):
        try:
            vitki = float(update.message.text)
            if vitki <= 0:
                update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")
                return VITKI
            
            self.user_data[update.message.from_user.id]['vitki'] = vitki
            update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–≤ –º–µ—Ç—Ä–∞—Ö):")
            return WIDTH
        except ValueError:
            update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10)")
            return VITKI
    
    def get_width(self, update: Update, context: CallbackContext):
        try:
            width = float(update.message.text)
            if width <= 0:
                update.message.reply_text("‚ùå –®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
                return WIDTH
            
            user_id = update.message.from_user.id
            data = self.user_data[user_id]
            pogony, kv_metri = count_diam(data['diameter'], data['vitki'], width)
            
            update.message.reply_text(
                f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                f"‚ñ™ –ü–æ–≥–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä—ã: {pogony:.2f}\n"
                f"‚ñ™ –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã: {kv_metri:.2f}\n\n"
                f"–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç: /start"
            )
            return ConversationHandler.END
        except ValueError:
            update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5)")
            return WIDTH
    
    def cancel(self, update: Update, context: CallbackContext):
        update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        return ConversationHandler.END
    
    def error_handler(self, update: Update, context: CallbackContext):
        error = context.error
        logging.error(f"–û—à–∏–±–∫–∞: {error}", exc_info=True)
        
        if update and update.message:
            update.message.reply_text(
                "‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start\n"
                f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {type(error).__name__}"
            )
    
    def run(self):
        self.updater.start_polling()
        self.updater.idle()
        
